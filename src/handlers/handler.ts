import UserRepository from '../repository/UserRepository';
import { Confirmation, Rejection, addUserToDatabase, changeDescription, isValidGMTFormat, sendMessagesToAdmins } from '../service/registrationService';
import { updateSessionAdminStage, updateSessionDescription, updateSessionDescriptionStage, updateSessionGmtStage, updateSessionInterviewer, updateSessionNewDescriptionStage, updateSessionRole, updateSessionTimezone, updateSessionsForUser } from '../service/sessionService';


export const adminHandler = async (ctx: any) => {
  ctx.session.adminStage = true;
  await updateSessionAdminStage(ctx.session.id, true);
  ctx.reply('–¢—ã –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω–∞, –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:');
}

export const interviewerHandler = async(ctx: any) => {
  ctx.session.interviewer = true;
  ctx.session.gmtStage = true;
  await updateSessionGmtStage(ctx.session.id, true);
  await updateSessionInterviewer(ctx.session.id, true);
  ctx.reply('write your gmt time zone in the format "5" or "-4.30');
};

export const intervieweeHandler = async (ctx: any) => {
  ctx.session.gmtStage = true;
  await updateSessionGmtStage(ctx.session.id, true);
  ctx.reply('write your gmt time zone in the format "5" or "-4.30');
};

export const registrationHandler = async (ctx: any) => {
  if (!ctx.session) {
    ctx.reply("–°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    await updateSessionsForUser(ctx);
  } else if (ctx.session?.adminStage) {
    if (ctx.message.text === process.env.ADMIN_PASSWORD && process.env.ADMIN_PASSWORD) {
      ctx.session.adminStage = false;
      ctx.session.role = 'admin';
      await updateSessionAdminStage(ctx.session.id, false);
      await updateSessionRole(ctx.session.id, 'admin');

      const username = ctx.from?.username || "Default";
      const chat_id = ctx.chat.id;

      addUserToDatabase(username, "admin", chat_id);

      ctx.reply('–¢—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω');
    } else {
      ctx.reply('–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }
  } else if (ctx.session?.gmtStage) {
    if (isValidGMTFormat(ctx.message.text)) {
      ctx.session.gmtStage = false;
      ctx.session.timezone = ctx.message.text;
      ctx.session.descriptionStage = true;

      await updateSessionGmtStage(ctx.session.id, false);
      await updateSessionTimezone(ctx.session.id, ctx.message.text);
      await updateSessionDescriptionStage(ctx.session.id, true);

      ctx.reply("–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –¥–ª—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ–º –∑–∞–Ω–∏–º–∞–ª—Å—è –∏ —Ç.–¥.");
    } else {
      ctx.reply("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ");
    }
  } else if (ctx.session?.descriptionStage) {
    ctx.session.description = ctx.message.text;
    ctx.session.descriptionStage = false;

    await updateSessionDescription(ctx.session.id, ctx.message.text);
    await updateSessionDescriptionStage(ctx.session.id, false);

    const username = ctx.from?.username || "Default";
    const chat_id = ctx.chat.id;
    const timezone = ctx.session.timezone;
    const info = ctx.session.description;

    if (ctx.session.interviewer) {
      const user = await addUserToDatabase(username, "interviewer", chat_id, timezone, info, false);
      if (!user) {
        ctx.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
      } else {
        ctx.reply("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞");
        await sendMessagesToAdmins(ctx, user);
      }
    } else {
      ctx.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è");
      await addUserToDatabase(username, "interviewee", chat_id, timezone, info, true);
    }
  } else if (ctx.session?.newDescriptionStage) {
    const chatId = ctx.message.chat.id;
    const newDescription = ctx.message.text;
    ctx.session.newDescriptionStage = false;

    await updateSessionNewDescriptionStage(ctx.session.id, false);
    await changeDescription(ctx, chatId, newDescription);
  } else {
    ctx.reply(`–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞`);
  }
};

export const approveHandler = async (ctx: any) => {
  if (!ctx.session) {
    ctx.reply("–°–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    await updateSessionsForUser(ctx);
  } else if (ctx.session?.role === "admin") {
    const id = parseInt(ctx.message.text.substring(1));
    const user = await UserRepository.findOne({ where: { id: id } });

    const options = [
      [`–°–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é`, `–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã`]
    ];

    if (ctx.message.text.startsWith('‚úÖ') && user) {
      updateSessionRole(ctx.session.id, "interviewer");

      user.approved = true;
      await UserRepository.save(user);

      Confirmation(ctx, user.chat_id);
      ctx.reply("–Æ–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!", {
        reply_markup: {
          keyboard: options,
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
    } else if (ctx.message.text.startsWith('üö´') && user) {
      Rejection(ctx, user.chat_id);
      ctx.reply("–Æ–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–Ω!", {
        reply_markup: {
          keyboard: options,
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
    }
  } else {
    ctx.reply(`–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã`);
  }
};

